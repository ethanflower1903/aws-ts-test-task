'use strict';

// tests for create
// Generated by serverless-jest-plugin

import {APIGatewayProxyResult} from "aws-lambda";

import {handler} from '../../src/point/point.index';
import eventGenerator from '../../src/testUtils/eventGenerator';
import * as jestPlugin from 'serverless-jest-plugin';
import {isApiGatewayResponse} from '../../src/testUtils/validators';

const wrapped = jestPlugin.lambdaWrapper.wrap(handler, { handler: 'create' });

describe('create', () => {
	beforeAll((done) => {
		done();
	});

	it('should return a 422 if the point is not valid', async () => {
		const params = eventGenerator.APIGatewayRequest({
			body: [
				{
					x: '',
					y: '',
					z: '',
					accuracy: '',
				}
			],
			pathParametersObject: {
				measurementId: 'test',
			},
		});

		const response: APIGatewayProxyResult = await wrapped.run(params) as APIGatewayProxyResult;
		expect(response).toBeDefined();
		expect(response.statusCode).toBe(422);
		expect(isApiGatewayResponse(response)).toBe(true);
	});

	it('should return a 200 with new point if the measurement valid', async () => {
		const params = eventGenerator.APIGatewayRequest({
			body: [
				{
					x: '123',
					y: '123',
					z: '123',
					accuracy: '1',
				}
			],
			pathParametersObject: {
				measurementId: 'test',
			},
		});

		const response: APIGatewayProxyResult = await wrapped.run(params) as APIGatewayProxyResult;
		expect(response).toBeDefined();
		expect(response.statusCode).toBe(200);
		expect(isApiGatewayResponse(response)).toBe(true);

		const body = JSON.parse(response.body);
		expect(body.data[0]).toEqual({
			id: expect.any(String),
			x: 123,
			y: 123,
			z: 123,
			accuracy: 1,
			measurementId: 'test',
			createdAt: expect.any(String),
			updatedAt: expect.any(String),
		});
	});

	it('should return a 400 if dont pass id ', async () => {
		const params = eventGenerator.APIGatewayRequest({
			body: {
			}
		});

		const response: APIGatewayProxyResult = await wrapped.run(params) as APIGatewayProxyResult;
		expect(response).toBeDefined();
		expect(response.statusCode).toBe(400);
		expect(isApiGatewayResponse(response)).toBe(true);
	});
});
