'use strict';

// tests for remove
// Generated by serverless-jest-plugin

import {APIGatewayProxyResult} from "aws-lambda";
import eventGenerator from '../../src/testUtils/eventGenerator';
import {handler} from '../../src/point/point.index';
import {handler as measurementHandler} from '../../src/measurement/measurement.index';
import * as jestPlugin from 'serverless-jest-plugin';
import {isApiGatewayResponse} from '../../src/testUtils/validators';

const wrapped = jestPlugin.lambdaWrapper.wrap(handler, { handler: 'remove' });

describe('remove', () => {
	beforeAll((done) => {
		done();
	});

	it('it should return 200', async () => {
		const measurementParams = eventGenerator.APIGatewayRequest(
			{
				body: {
					name: 'test',
				}
			}
		);
		const result = await measurementHandler.create(measurementParams);
		const measurement = JSON.parse(result.body);

		const points = eventGenerator.APIGatewayRequest(
			{
				body: [
					{
						x: 1,
						y: 1,
						z: 1,
						accuracy: 1,
					}
				],
				pathParametersObject: {
					measurementId: measurement.data.id,
				},
			}
		);
		const pointResponse = await handler.create(points);
		const point = JSON.parse(pointResponse.body).data[0];

		const params = eventGenerator.APIGatewayRequest(
			{
				pathParametersObject: {
					pointId: point.id,
				}
			}
		);
		const response: APIGatewayProxyResult = await wrapped.run(params) as APIGatewayProxyResult;
		expect(response).toBeDefined();
		expect(response.statusCode).toBe(200);
		expect(isApiGatewayResponse(response)).toBe(true);
	});

	it('should return 400 if we dont pass an id', async () => {
		const params = eventGenerator.APIGatewayRequest(
			{
				pathParametersObject: {
					pointId: ''
				}
			}
		);

		const response: APIGatewayProxyResult = await wrapped.run(params) as APIGatewayProxyResult;
		expect(response).toBeDefined();
		expect(response.statusCode).toBe(400);
		expect(isApiGatewayResponse(response)).toBe(true);
	});
});
