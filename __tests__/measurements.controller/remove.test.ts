'use strict';

// tests for remove
// Generated by serverless-jest-plugin

import {APIGatewayProxyResult} from "aws-lambda";
import eventGenerator from '../../src/testUtils/eventGenerator';
import {handler} from '../../src/measurement/measurement.index';
import * as jestPlugin from 'serverless-jest-plugin';
import {isApiGatewayResponse} from '../../src/testUtils/validators';

const wrapped = jestPlugin.lambdaWrapper.wrap(handler, { handler: 'remove' });

describe('remove', () => {
	beforeAll((done) => {
		done();
	});

	it('it should return 200', async () => {
		const body = eventGenerator.APIGatewayRequest(
			{
				body: {
					name: 'test',
				}
			}
		);
		const result = await handler.create(body);
		const ID = JSON.parse(result.body).data.id;

		const params = eventGenerator.APIGatewayRequest(
			{
				pathParametersObject: {
					id: ID
				}
			}
		);
		const response: APIGatewayProxyResult = await wrapped.run(params) as APIGatewayProxyResult;
		expect(response).toBeDefined();
		expect(response.statusCode).toBe(200);
		expect(isApiGatewayResponse(response)).toBe(true);
	});

	it('should return 400 if we dont pass an id', async () => {
		const params = eventGenerator.APIGatewayRequest(
			{
				pathParametersObject: {
					id: ''
				}
			}
		);

		const response: APIGatewayProxyResult = await wrapped.run(params) as APIGatewayProxyResult;
		expect(response).toBeDefined();
		expect(response.statusCode).toBe(400);
		expect(isApiGatewayResponse(response)).toBe(true);
	});
});
